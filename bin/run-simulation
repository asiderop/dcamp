#!/usr/bin/env python3

from subprocess import Popen, STDOUT
from sys import stderr
from os.path import join, isdir, isfile
from os import mkdir, getenv
from signal import SIGINT

# config
HOSTNAMES = ['localhost']
START_PORT = 50000
PORTS_PER_NODE = 10

HEARTBEAT = '60s'
METRICS = '''
[proc]
rate = 60s
threshold = *60s
metric = CPU

[disk]
rate = 120s
threshold = >500000
metric = DISK

[net]
rate = 120s
threshold = *120s
metric = NETWORK

[mem]
rate = 60s
metric = MEMORY
'''

# paths
BASE_DIR = getenv('BASE_DIR', None) or (print('BASE_DIR not defined'), exit(-1))
DCAMP = join(BASE_DIR, 'bin/dcamp')
CONFIG = join(BASE_DIR, '.simulation.cfg')
DEBUG_DIR = join(BASE_DIR, 'debug/')

def log(msg):
    print(msg, file=stderr)


class Simulator(object):
    def __init__(self):
        self.state = 'clear'
        self.clear()
    
    def clear(self):
        if self.state not in ('clear', 'dead'):
            log('ERRR: cannot clear config while running')
            return

        self.state = 'clear'
        self.nodes = {}
        self.root = None

    def write_config(self, args):
        if 'clear' != self.state:
            log('ERRR: not in clear state')
            return

        if len(args) != 2:
            log('USAGE: config <num-groups> <nodes-per-host>')
            return

        num_groups = int(args[0])
        nodes_per_host = int(args[1])

        if isfile(CONFIG):
            log("WARN: config file already exists; overwriting")

        for host in HOSTNAMES:
            port = START_PORT
            a = None
            for idx in range(nodes_per_host):
                a = '%s:%d' % (host, port)
                self.nodes[a] = None
                port += PORTS_PER_NODE
            self.root = a  # we'll use the last address as root

        with open(CONFIG, 'w') as out:
            # global section
            out.write('[global]\nheartbeat = %s' % HEARTBEAT)

            start_address = 0
            per_group = int(len(self.nodes) / num_groups)
            for idx in range(num_groups):

                # group heading
                out.write('\n[group%d]\n' % idx)

                # group endpoint listings
                end_address = start_address + per_group
                if (idx+1) == num_groups:
                    # if last group, just put the rest in here
                    end_address = len(self.nodes)

                self.__write_addresses(out, start_address, end_address)
                log('INFO: group %d has %d nodes' % (idx, end_address - start_address))
                start_address += per_group

                # group metrics
                out.write('\nproc\ndisk\nmem\nnet\n')

            # metric specs
            out.write(METRICS)

        self.state = 'dead'

    def __write_addresses(self, out, start, end):
        for address in sorted(list(self.nodes.keys()))[start:end]:
            out.write(address + '\n')

    def launch(self):
        if 'dead' != self.state:
            return
        if not isdir(DEBUG_DIR):
            mkdir(DEBUG_DIR)
        log('INFO: launching %d nodes' % len(self.nodes))
        for a in self.nodes:
            assert self.nodes[a] is None
            fout = open(join(DEBUG_DIR, a + '.out'), 'w')
            p = Popen([DCAMP, '-v', 'base', '-a', a], stdout=fout, stderr=STDOUT)
            self.nodes[a] = (p, fout)
        self.state = 'waiting'

    def start(self):
        if 'waiting' != self.state:
            return
        Popen([DCAMP, '-v', 'root', '--start', '-f', CONFIG, '-a', self.root]).wait()
        self.state = 'running'

    def stop(self):
        if 'running' != self.state:
            return
        Popen([DCAMP, '-v', 'root', '--stop', '-f', CONFIG, '-a', self.root]).wait()
        self.state = 'waiting'

    def kill(self, nodes=None):
        if self.state in ('dead', 'clear'):
            return

        if nodes is None or len(nodes) == 0:
            nodes = self.nodes.keys()
            self.state = 'dead'

        for a in nodes:
            if a in self.nodes and self.nodes[a] is not None:
                (p, fout) = self.nodes[a]
                p.send_signal(SIGINT)

        for a in nodes:
            if a in self.nodes and self.nodes[a] is not None:
                (p, fout) = self.nodes[a]
                p.wait()
                fout.close()
                self.nodes[a] = None

    def run(self):
        try:
            while True:

                res = input("%s. what do? [clear|config|launch|start|stop|kill]: " % self.state).split()

                action = ''
                args = []
                if len(res) > 0:
                    action = res[0]
                if len(res) > 1:
                    args = res[1:]

                if action not in ['clear', 'config', 'launch', 'start', 'stop', 'kill']:
                    log("ERRR: unknown option")

                # clear config
                if 'clear' == action:
                    self.clear()

                # write config file
                if 'config' == action:
                    self.write_config(args)

                # launch base nodes
                if 'launch' == action:
                    self.launch()

                # start root node
                if 'start' == action:
                    self.start()

                # stop root node
                if 'stop' == action:
                    self.stop()

                # kill one/all nodes
                if 'kill' == action:
                    self.kill(args)

        except KeyboardInterrupt:
            try:
                log('\nINFO: exiting...')
                self.kill()
            except KeyboardInterrupt:
                # maybe a process was blocked on a socket...kill it again
                log('\nINFO: really exiting...')
                self.kill()

        log("\nGood bye!")


s = Simulator()
s.run()
