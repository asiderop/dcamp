#!/usr/bin/env python3

from subprocess import Popen, DEVNULL, STDOUT
from sys import stderr
from os.path import join, isdir
from os import mkdir
from signal import SIGINT

addresses = [
	'localhost:55500',
	'localhost:55600',
	'siderop1-losx.local:55630',
	'localhost:55660',
	'localhost:55700',
	'localhost:55730',
	'localhost:55760',
	'localhost:55800',
	'localhost:55830',
	'localhost:55860',
	'192.168.1.103:55900',
	'192.168.1.103:55930',
	'192.168.1.103:55960',
]

base = '/Volumes/Repositories/Personal/dcamp'
dcamp = join(base, 'bin/dcamp')
config = join(base, 'dcamp.cfg')
debug = join(base, 'debug/')

class Simulator(object):

	action = None
	state = 'dead'
	procs = []

	def base(self):
		if 'dead' != self.state:
			return
		if not isdir(debug):
			mkdir(debug)
		for a in addresses:
			fout = open(join(debug, a + '.out'), 'w')
			p = Popen([dcamp, '-d', 'base', '-a', a], stdout=fout, stderr=STDOUT)
			self.procs.append((p, fout))
		self.state = 'ready'

	def root(self):
		if 'ready' != self.state:
			return
		Popen([dcamp, '-d', 'root', '-f', config]).wait()
		self.state = 'running'

	def kill(self):
		if 'dead' == self.state:
			return
		for (p, fout) in self.procs:
			p.send_signal(SIGINT)
		for (p, fout) in self.procs:
			p.wait()
			fout.close()
		self.procs.clear()
		self.state = 'dead'

	def run(self):
		try:
			while True:
				self.action = input("%s. what do to? [kill|base|root]: " % self.state)

				if self.action not in ['kill', 'base', 'root']:
					print("unknown option", file=stderr)

				# launch base nodes
				if 'base' == self.action:
					self.base()

				if 'root' == self.action:
					self.root()

				if 'kill' == self.action:
					self.kill()

		except KeyboardInterrupt:
			self.kill()

		print("\nGood bye!")

s = Simulator()
s.run()
